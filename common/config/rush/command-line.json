/**
 * This configuration file defines custom commands for the "rush" command-line.
 * More documentation is available on the Rush website: https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/command-line.schema.json",
  "commands": [
    {
      "name": "hooks:format",
      "commandKind": "global",
      "summary": "Used by the pre-commit Git hook. This command invokes code styles to reformat staged changes.",
      "safeForSimultaneousRushProcesses": true,
      "autoinstallerName": "rush-lintstaged",
      "shellCommand": "sh common/autoinstallers/rush-lintstaged/index.sh"
    },
    {
      "name": "docs",
      "commandKind": "global",
      "summary": "Create document markdown for all projects. This will automatically run on CI by default",
      "safeForSimultaneousRushProcesses": false,
      "autoinstallerName": "rush-api-documenter",
      "shellCommand": "sh common/autoinstallers/rush-api-documenter/index.sh"
    },
    {
      "name": "deps",
      "commandKind": "global",
      "summary": "Check dependencies version of each packages (including autoinstallers)",
      "safeForSimultaneousRushProcesses": false,
      "autoinstallerName": "rush-dependencies-updater",
      "shellCommand": "sh common/autoinstallers/rush-dependencies-updater/index.sh"
    },
    {
      "name": "test",
      "commandKind": "bulk",
      "summary": "Runs unit tests for all projects",
      "enableParallelism": true,
      "ignoreMissingScript": true,
      "ignoreDependencyOrder": true
    },
    {
      "name": "clean",
      "commandKind": "bulk",
      "summary": "Cleaning ignored files/directories for all projects",
      "enableParallelism": true,
      "ignoreMissingScript": true,
      "ignoreDependencyOrder": true
    }
  ],

  /**
   * Custom "parameters" introduce new parameters for specified Rush command-line commands.
   * For example, you might define a "--production" parameter for the "rush build" command.
   */
  "parameters": [
    {
      "parameterKind": "flag",
      "longName": "--upgrade",
      "shortName": "-u",
      "description": "Overwrite package file with upgraded versions instead of just outputting to console.",
      "associatedCommands": ["deps"]
    },
    {
      "parameterKind": "flag",
      "longName": "--verbose",
      "description": "Log additional information for debugging.",
      "associatedCommands": ["deps"]
    },
    {
      "parameterKind": "flag",
      "longName": "--interactive",
      "shortName": "-i",
      "description": "Interactively select which packages to upgrade.",
      "associatedCommands": ["deps"]
    },
    {
      "parameterKind": "choice",
      "longName": "--target",
      "shortName": "-t",
      "description": "Determines the version to upgrade to: latest, newest, greatest, minor, patch. (default: minor)",
      "defaultValue": "minor",
      "alternatives": [
        {
          "name": "latest",
          "description": "Upgrades to the latest version of the package."
        },
        {
          "name": "newest",
          "description": "Upgrades to the newest version of the package."
        },
        {
          "name": "greatest",
          "description": "Upgrades to the greatest version of the package."
        },
        {
          "name": "minor",
          "description": "Upgrades to the latest minor version of the package."
        },
        {
          "name": "patch",
          "description": "Upgrades to the latest patch version of the package."
        }
      ],
      "associatedCommands": ["deps"]
    }
  ]
}
